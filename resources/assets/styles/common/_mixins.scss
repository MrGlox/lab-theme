/**
 * 1. Font and Wording
 */

// FontFace. GO to common/_fonts.scss to see it in action
@function main-src($formats, $file-path, $font-family) {
  // Return the list of `src` values, in order, that
  // a good `@font-face` will need, including only
  // those formats specified in the list `$formats`.
  $result: ();
  @if index($formats, eot) {
    $eot-val: url('#{$file-path}.eot?#iefix') format('embedded-opentype');
    $result: append($result, $eot-val, comma);
  }
  @if index($formats, woff2) {
    $woff2-val: url('#{$file-path}.woff2') format('woff2');
    $result: append($result, $woff2-val, comma);
  }
  @if index($formats, woff) {
    $woff-val: url('#{$file-path}.woff') format('woff');
    $result: append($result, $woff-val, comma);
  }
  @if index($formats, ttf) {
    $ttf-val: url('#{$file-path}.ttf') format('truetype');
    $result: append($result, $ttf-val, comma);
  }
  @if index($formats, svg) {
    $svg-val: url('#{$file-path}.svg##{$font-family}') format('svg');
    $result: append($result, $svg-val, comma);
  }
  @return $result;
}

@mixin font-face (
  $font-family,
  $file-path,
  $weight: 400,
  $style: normal,
  $formats: eot ttf
) {
  @if index('italic' 'oblique', $weight) {
    $style: $weight;
    $weight: normal;
  }

  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    @if index($formats, eot) {
      src: url('#{$file-path}.eot');
    }
    src: main-src($formats, $file-path, $font-family);
  }
}

// Word wrap
@mixin word-wrap($wrap: break-word) {
  overflow-wrap: $wrap;
  word-wrap: $wrap;

  @if $wrap==break-word {
    word-break: break-all;
  }

  @else {
    word-break: $wrap;
  }
}

/**
 * 2. Images
 */

// Image responsive
@mixin img__responsive($max-width:100%) {
  display: block;
  max-width: $max-width;
  height: auto;
}

// Object Fit polyfill
@mixin object-fit($fit: cover, $position: null) {
  object-fit: $fit;

  @if $position {
    object-position: $position;
    font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  }

  @else {
    font-family: 'object-fit: #{$fit}';
  }
}

/**
 * 3. Forms
 */
@function assign-inputs($inputs, $pseudo: null) {
  $list: ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}

// Mixin for custom checkbox
@mixin checkbox--custom($color: $primary, $size: 1em, $border-width: 2px) {
  margin-bottom: 20px;

  input[type="checkbox"],
  input[type="radio"] {
    @extend .visuallyhidden;

    &+label {
      display: block;
      cursor: pointer;
      position: relative;
      padding-left: $size * 1.5;

      &:before {
        content: '';
        position: absolute;
        left: 0;
        top: 1px;
        background-color: transparent;
        width: calc(#{$size} + #{$border-width});
        height: calc(#{$size} + #{$border-width});
        margin: 0;
        border: $border-width solid $color;
        cursor: pointer;
        transition: background-color .25s ease;
      }
    }

    &:checked {
      &+label {
        &:before {
          background-color: $color;
        }
      }
    }
  }
}


// Custom radio
@mixin radio--custom() {
  input[type="radio"] {
    &+label {
      &:before {
        border-radius: 50%;
      }
    }
  }
}

//Custom select
@mixin select--custom {
  display: block;
  font-size: 16px; // prevent iOS zoom
  color: $textcolor;
  line-height: 1.15;
  padding: $spxs $spxs*3 $spxs $spxs;
  width: 100%;
  max-width: 100%;
  /* useful when width is set to anything other than 100% */
  margin: 0;
  border: 1px solid $maingrey;
  border-radius: 0;
  appearance: none;
  background-color: $lightcolor;
  background-image: url('#{$icons}/down.svg'),
  linear-gradient(to bottom, $lightcolor 0%, $lightcolor 100%);
  background-repeat: no-repeat, repeat;
  background-position: right 10px top 50%, 0 0;
  background-size: 10px auto, 100%;

  // Hide arrow icon in IE browsers
  &::-ms-expand {
    display: none;
  }

  // Hover style
  &:hover {
    border-color: darken($maingrey, 10%);
  }

  // Focus style
  &:focus {
    border-color: darken($maingrey, 20%);
    box-shadow: 0 0 1px 3px rgba(59, 153, 252, .7);
    box-shadow: 0 0 0 3px -moz-mac-focusring;
    color: darken($textcolor, 10%);
    outline: none;

    option {
      outline: none;
    }
  }

  // Set options to normal weight
  option {
    font-weight: normal;
  }

  // Support for rtl text, explicit support for Arabic and Hebrew
  *[dir="rtl"] &,
  :root:lang(ar) &,
  :root:lang(iw) & {
    background-position: left 10px top 50%, 0 0;
  }
}

// Appearence for form elements
@mixin appearance($value) {
  appearance: $value;
}

// Customize placeholder
@mixin placeholder {
  $placeholders: ":-webkit-input"":-moz""-moz""-ms-input";

  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

/**
 * 4. Miscellaneous
 */

// Hover Active Focus pseudo selector mixin
@mixin hover {

  &:hover,
  &:active,
  &:focus {
    @content;
  }
}

// Insert content for extra style
@mixin pseudo__content {
  content: "";
  display: block;
  speak: none;
}

// Card base
@mixin card {
  padding: $sp;
  box-shadow: 0 2px 4px rgba($darkcolor, .25);
}

// Float, left by default
@mixin align($direction:left) {
  float: $direction;

  @if ($direction==left) {
    margin-right: $sp;
  }

  @else {
    margin-left: $sp;
  }
}

//fullwidth row
@mixin row--fullwidth($position: relative) {
  z-index: $zi;
  position: $position;
  width: 100vw;
  left: 50%;
  transform: translateX(-50%) translateY(0);
}

// Clearfix
@mixin clearfix {

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Hardware acceleration
@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
}
